heat_template_version: 2016-04-08

description:
  This Heat template describes resources for VM with DPDK feature.

parameters:
  image:
    type: string
    description: Name of image to use for servers
    default: trusty-server3
  flavor:
    type: string
    description: Flavor to use for servers
    default: dpdk.small
  key_name:
    type: string
    default: sshkey
  external_net:
    type: string
    description: ID or name of external network
  network_name:
    type: string
    description: ID or name of network
    default: admin_internal_net
  server_endpoint:
    type: string
    description: Server endpoint address
  dns_nameservers:
    type: comma_delimited_list
    description: DNS nameservers for the subnet
    default: 8.8.8.8

resources:
{% for agent in agents.values() %}
  {{ agent.id }}:
    type: OS::Nova::Server
    properties:
      name:
        list_join: ['-',['shakerdpdk','{{ loop.index }}' ]]
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      availability_zone: "{{ agent.availability_zone }}"
      networks:
        - network: { get_param: network_name }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            export SHAKER_SERVER_ENDPOINT=server_endpoint
            export SHAKER_AGENT_ID=agent_id
            #!/bin/bash
            # This script is setting up networking inside VM
            # provideas as-is!
            SHAKER_SERVER_ENDPOINT=${SHAKER_SERVER_ENDPOINT}
            SHAKER_AGENT_ID=${SHAKER_AGENT_ID:-''}
            function allow_ssh_with_passwd()
            {
              local sshdconf="/etc/ssh/sshd_config"
              sed -i ${sshdconf} -e 's/#PasswordAuthentication.*$/PasswordAuthentication yes/'
              service ssh restart
            }
            function run_shaker()
            {
              pip install flent==0.15
              screen -dmS shaker-agent-screen shaker-agent --server-endpoint=${SHAKER_SERVER_ENDPOINT} --agent-id=${SHAKER_AGENT_ID}
            }
            # Main logic
            allow_ssh_with_passwd
            run_shaker
          params:
            server_endpoint: { get_param: server_endpoint}
            agent_id: {{ agent.id }}

{% endfor %}

outputs:
{% for agent in agents.values() %}
  {{ agent.id }}_instance_name:
    value: { get_attr: [ {{ agent.id }}, instance_name ] }
  {{ agent.id }}_ip:
    value: { get_attr: [ {{ agent.id }}, first_address ] }
{% endfor %}

