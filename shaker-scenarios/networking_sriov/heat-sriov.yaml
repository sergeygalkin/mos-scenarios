heat_template_version: 2016-04-08

description:
  This Heat template describes resources for VM with SR-IOV Neutron port.
  In this template all network setup going to be made by user-data script.

parameters:
  image:
    type: string
    description: Name of image to use for servers
    default: trusty-server2
  index:
    type: string
    description: Index of resource
    default: 1
  flavor:
    type: string
    description: Flavor to use for servers
    default: dpdk.small
  key_name:
    type: string
    default: sshkey
  external_net:
    type: string
    description: ID or name of external network
  network_name:
    type: string
    description: ID or name of network
    default: sriovnet
  netaddr:
    type: string
    description: Network address to be set for VMs
    default: '637:172.20.128.0/22'
  server_endpoint:
    type: string
    description: Server endpoint address
  dns_nameservers:
    type: comma_delimited_list
    description: DNS nameservers for the subnet
    default: 8.8.8.8

resources:
{% set startaddrpart = 70 %}
{% set vlanpart = '637' %}
{% set startnetpart = '172.20.128' %}
{% set endnetpart = '/22' %}
{% set netpart = vlanpart + ':' + startnetpart + '.0' + endnetpart %}
{% set addresses = [] %}
{% for agent in agents.values() %}
{% set ipaddr = startnetpart ~ '.' ~ startaddrpart ~ endnetpart %}
{% if addresses.append(startnetpart ~ '.' ~ startaddrpart) %}{% endif %}
  {{ agent.id }}:
    type: OS::Nova::Server
    properties:
      name:
        list_join: ['-',['shakersriov','{{ loop.index }}' ]]
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      availability_zone: "{{ agent.availability_zone }}"
      networks:
         - port: { get_resource: {{ agent.id }}_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            export NETADDR=netaddr
            export IPADDRESS=ipaddr_net
            export INDEX=index
            export SHAKER_SERVER_ENDPOINT=server_endpoint
            export SHAKER_AGENT_ID=agent_id
            #!/bin/bash
            # This script is setting up networking inside VM
            # provideas as-is!
            NSADDR=${NSADDR:-8.8.8.8}
            NETADDR=${NETADDR}
            IPADDRESS=${IPADDRESS}
            INDEX=${INDEX}
            NETIF=${NETIF:-eth0}
            SHAKER_SERVER_ENDPOINT=${SHAKER_SERVER_ENDPOINT}
            SHAKER_AGENT_ID=${SHAKER_AGENT_ID:-''}
            function setup_iface()
            {
              local vlan
              local srciface
              local router
              local ipaddr
              vlan=${1}
              srciface=${2}
              router=${3}
              ipaddr=${4}
              echo "nameserver ${NSADDR}" > /etc/resolv.conf
              ip link set dev ${srciface} up
              if [ ${vlan} -gt 0 ]; then
                ip link add link ${srciface} vlan${vlan} type vlan id ${vlan}
                ip link set dev vlan${vlan} up
                ip addr add ${ipaddr} dev vlan${vlan}
              else
                ip addr add ${ipaddr} dev ${srciface}
              fi
              ip route add default via ${router}
            }
            function count_addr()
            {
              local vlan
              local ipaddr
              local neta
              local subnetpart
              local subnetcidr
              vlan=$(echo ${NETADDR} | cut -d':' -f1)
              if [ -z "${vlan}" ]; then vlan=0; fi
              neta=$(echo ${NETADDR} | cut -d':' -f2)
              subnetpart=$(echo ${neta} | cut -d'.' -f1-3)
              subnetcidr=$(echo ${neta} | cut -d'/' -f2)
              setup_iface "${vlan}" "${NETIF}" "${subnetpart}.1" "${IPADDRESS}"
            }
            function allow_ssh_with_passwd()
            {
              local sshdconf="/etc/ssh/sshd_config"
              sed -i ${sshdconf} -e 's/#PasswordAuthentication.*$/PasswordAuthentication yes/'
              service ssh restart
            }
            function run_shaker()
            {
              pip install flent==0.15
              screen -dmS shaker-agent-screen shaker-agent --server-endpoint=${SHAKER_SERVER_ENDPOINT} --agent-id=${SHAKER_AGENT_ID}
            }
            # Main logic
            count_addr
            allow_ssh_with_passwd
            run_shaker
          params:
            netaddr: {{ netpart }}
            ipaddr_net: {{ ipaddr }}
            index: {{ loop.index }}
            server_endpoint: { get_param: server_endpoint}
            agent_id: {{ agent.id }}

  {{ agent.id }}_port:
    type: OS::Neutron::Port
    properties:
      name:
        list_join: ['-',['sriov-port', '{{ loop.index }}' ]]
      network: { get_param: network_name }
      'binding:vnic_type': direct
      admin_state_up: True

{% set startaddrpart = startaddrpart + 1 %}
{% endfor %}

outputs:
{% for agent in agents.values() %}
  {{ agent.id }}_instance_name:
    value: { get_attr: [ {{ agent.id }}, instance_name ] }
  {{ agent.id }}_ip:
    value: {{ addresses[loop.index - 1] }}
{% endfor %}
